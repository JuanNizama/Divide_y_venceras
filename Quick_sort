#include <iostream>
using namespace std;

// Función para intercambiar dos elementos
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Función para colocar el elemento pivote en la posición correcta
int partition(int arr[], int low, int high) {
    int pivot = arr[high];  // seleccionamos el último elemento como pivote
    int i = (low - 1);  // índice del elemento más pequeño

    for (int j = low; j <= high - 1; j++) {
        // Si el elemento actual es más pequeño o igual que el pivote
        if (arr[j] <= pivot) {
            i++;  // incrementamos el índice del elemento más pequeño
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

// Función principal del QuickSort
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        // Obtener el índice del elemento pivote
        int pi = partition(arr, low, high);

        // Ordenar los elementos antes y después de la partición
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// Función para imprimir el arreglo
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

// Programa de prueba
int main() {
    int arr[] = {64, 25, 12, 22, 11};
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Arreglo original: ";
    printArray(arr, n);

    quickSort(arr, 0, n - 1);

    cout << "Arreglo ordenado: ";
    printArray(arr, n);

    return 0;
}
