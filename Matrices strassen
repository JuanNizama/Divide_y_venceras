#include <iostream>
#include <vector>

using namespace std;

// Función para sumar dos matrices
vector<vector<int>> sumMatrix(const vector<vector<int>>& A, const vector<vector<int>>& B) {
    int n = A.size();
    vector<vector<int>> C(n, vector<int>(n, 0));

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }

    return C;
}

// Función para restar dos matrices
vector<vector<int>> subtractMatrix(const vector<vector<int>>& A, const vector<vector<int>>& B) {
    int n = A.size();
    vector<vector<int>> C(n, vector<int>(n, 0));

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] - B[i][j];
        }
    }

    return C;
}

// Función para multiplicar dos matrices usando el algoritmo de Strassen
vector<vector<int>> strassen(const vector<vector<int>>& A, const vector<vector<int>>& B) {
    int n = A.size();

    // Caso base: Si la matriz es 1x1, realizar la multiplicación directamente
    if (n == 1) {
        vector<vector<int>> C(1, vector<int>(1));
        C[0][0] = A[0][0] * B[0][0];
        return C;
    }

    // Dividir las matrices en submatrices más pequeñas
    int halfSize = n / 2;
    vector<vector<int>> A11(halfSize, vector<int>(halfSize));
    vector<vector<int>> A12(halfSize, vector<int>(halfSize));
    vector<vector<int>> A21(halfSize, vector<int>(halfSize));
    vector<vector<int>> A22(halfSize, vector<int>(halfSize));

    vector<vector<int>> B11(halfSize, vector<int>(halfSize));
    vector<vector<int>> B12(halfSize, vector<int>(halfSize));
    vector<vector<int>> B21(halfSize, vector<int>(halfSize));
    vector<vector<int>> B22(halfSize, vector<int>(halfSize));

    for (int i = 0; i < halfSize; i++) {
        for (int j = 0; j < halfSize; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + halfSize];
            A21[i][j] = A[i + halfSize][j];
            A22[i][j] = A[i + halfSize][j + halfSize];

            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + halfSize];
            B21[i][j] = B[i + halfSize][j];
            B22[i][j] = B[i + halfSize][j + halfSize];
        }
    }

    // Calcula los productos intermedios recursivamente
    vector<vector<int>> P1 = strassen(A11, subtractMatrix(B12, B22));
    vector<vector<int>> P2 = strassen(sumMatrix(A11, A12), B22);
    vector<vector<int>> P3 = strassen(sumMatrix(A21, A22), B11);
    vector<vector<int>> P4 = strassen(A22, subtractMatrix(B21, B11));
    vector<vector<int>> P5 = strassen(sumMatrix(A11, A22), sumMatrix(B11, B22));
    vector<vector<int>> P6 = strassen(subtractMatrix(A12, A22), sumMatrix(B21, B22));
    vector<vector<int>> P7 = strassen(subtractMatrix(A11, A21), sumMatrix(B11, B12));

    // Calcula las submatrices de la matriz resultante
    vector<vector<int>> C11 = subtractMatrix(sumMatrix(sumMatrix(P5, P4), P6), P2);
    vector<vector<int>> C12 = sumMatrix(P1, P2);
    vector<vector<int>> C21 = sumMatrix(P3, P4);
    vector<vector<int>> C22 = subtractMatrix(subtractMatrix(sumMatrix(P5, P1), P3), P7);

    // Combina las submatrices para formar la matriz resultante
    vector<vector<int>> C(n, vector<int>(n));

    for (int i = 0; i < halfSize; i++) {
        for (int j = 0; j < halfSize; j++) {
            C[i][j] = C11[i][j];
            C[i][j + halfSize] = C12[i][j];
            C[i + halfSize][j] = C21[i][j];
            C[i + halfSize][j + halfSize] = C22[i][j];
        }
    }

    return C;
}

// Función para imprimir una matriz
void printMatrix(const vector<vector<int>>& matrix) {
    int n = matrix.size();

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    // Ejemplo de uso
    vector<vector<int>> A = {{1, 2}, {3, 4}};
    vector<vector<int>> B = {{5, 6}, {7, 8}};

    cout << "Matriz A:" << endl;
    printMatrix(A);

    cout << "Matriz B:" << endl;
    printMatrix(B);

    vector<vector<int>> C = strassen(A, B);

    cout << "Matriz C (Resultado de la multiplicación):" << endl;
    printMatrix(C);

    return 0;
}
